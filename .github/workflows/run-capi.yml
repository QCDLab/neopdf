name: Run the C/C++/Fortran-API tests ðŸ“¦

on: [push]

defaults:
  run:
    shell: bash

jobs:
  capi:
    runs-on: ubuntu-latest
    container: ghcr.io/qcdlab/neopdf-container:latest

    steps:
      - uses: actions/checkout@v4
      - name: Install NeoPDF's C-API and C++ OOP Header ðŸ“¦
        env:
          RUSTFLAGS: '-Cinstrument-coverage -Clink-dead-code'
        run: |
          cd neopdf_capi
          # path to install the C++ OOP header
          export CARGO_C_INSTALL_PREFIX=/usr/local
          cargo cinstall --verbose --prefix=/usr/local/ --libdir=/usr/local/lib
          ldconfig

      - name: Test C/C++ examples ðŸš€
        run: |
          cd neopdf_capi/tests
          export NEOPDF_DATA_PATH=/usr/share/LHAPDF
          sed -i "s/\([a-zA-Z_]\+\) != \(.*\)$/echo \1 = \$(\2)/e" Makefile
          make test-examples

      - name: Test Fortran examples ðŸš€
        run: |
          cd neopdf_fapi
          export NEOPDF_DATA_PATH=/usr/share/LHAPDF
          sed -i "s/\([a-zA-Z_]\+\) != \(.*\)$/echo \1 = \$(\2)/e" Makefile
          make test-examples

      - name: Generate code coverage ðŸš€
        run: |
          # from https://github.com/NNPDF/pineappl/blob/master/.github/workflows/capi.yaml
          find . -name '*.profraw' -exec $(rustc --print target-libdir)/../bin/llvm-profdata merge -sparse -o neopdf.profdata {} +
          $(rustc --print target-libdir)/../bin/llvm-cov export \
                  --ignore-filename-regex='index.crates.io' \
                  --ignore-filename-regex='rustc' \
                  --instr-profile=neopdf.profdata \
                  --skip-functions \
                  --object /usr/local/lib/libneopdf_capi.so.*.*.* \
                  --format lcov > lcov.info
          grep SF lcov.info | sort -u | sed 's/SF://'

      - name: Upload to codecov.io ðŸš€
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: capi
