//! This module contains the logic for handling evolution PIDs and their
//! transformation to and from PDG Monte Carlo IDs.

#[allow(dead_code)]
pub const EVOL_BASIS_IDS: [i32; 12] = [100, 103, 108, 115, 124, 135, 200, 203, 208, 215, 224, 235];

/// Represents the PID basis for interpolation.
#[repr(C)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum PidBasis {
    /// Parton Distribution Group (PDG) basis.
    Pdg,
    /// Evolution basis.
    Evol,
}

/// Translates IDs from the evolution basis into IDs using PDG Monte Carlo IDs.
#[allow(dead_code)]
pub fn evol_to_pdg_mc_ids(id: i32) -> Vec<(i32, f64)> {
    match id {
        100 => vec![
            (2, 1.0),
            (-2, 1.0),
            (1, 1.0),
            (-1, 1.0),
            (3, 1.0),
            (-3, 1.0),
            (4, 1.0),
            (-4, 1.0),
            (5, 1.0),
            (-5, 1.0),
            (6, 1.0),
            (-6, 1.0),
        ],
        103 => vec![(2, 1.0), (-2, 1.0), (1, -1.0), (-1, -1.0)],
        108 => vec![
            (2, 1.0),
            (-2, 1.0),
            (1, 1.0),
            (-1, 1.0),
            (3, -2.0),
            (-3, -2.0),
        ],
        115 => vec![
            (2, 1.0),
            (-2, 1.0),
            (1, 1.0),
            (-1, 1.0),
            (3, 1.0),
            (-3, 1.0),
            (4, -3.0),
            (-4, -3.0),
        ],
        124 => vec![
            (2, 1.0),
            (-2, 1.0),
            (1, 1.0),
            (-1, 1.0),
            (3, 1.0),
            (-3, 1.0),
            (4, 1.0),
            (-4, 1.0),
            (5, -4.0),
            (-5, -4.0),
        ],
        135 => vec![
            (2, 1.0),
            (-2, 1.0),
            (1, 1.0),
            (-1, 1.0),
            (3, 1.0),
            (-3, 1.0),
            (4, 1.0),
            (-4, 1.0),
            (5, 1.0),
            (-5, 1.0),
            (6, -5.0),
            (-6, -5.0),
        ],
        200 => vec![
            (1, 1.0),
            (-1, -1.0),
            (2, 1.0),
            (-2, -1.0),
            (3, 1.0),
            (-3, -1.0),
            (4, 1.0),
            (-4, -1.0),
            (5, 1.0),
            (-5, -1.0),
            (6, 1.0),
            (-6, -1.0),
        ],
        203 => vec![(2, 1.0), (-2, -1.0), (1, -1.0), (-1, 1.0)],
        208 => vec![
            (2, 1.0),
            (-2, -1.0),
            (1, 1.0),
            (-1, -1.0),
            (3, -2.0),
            (-3, 2.0),
        ],
        215 => vec![
            (2, 1.0),
            (-2, -1.0),
            (1, 1.0),
            (-1, -1.0),
            (3, 1.0),
            (-3, -1.0),
            (4, -3.0),
            (-4, 3.0),
        ],
        224 => vec![
            (2, 1.0),
            (-2, -1.0),
            (1, 1.0),
            (-1, -1.0),
            (3, 1.0),
            (-3, -1.0),
            (4, 1.0),
            (-4, -1.0),
            (5, -4.0),
            (-5, 4.0),
        ],
        235 => vec![
            (2, 1.0),
            (-2, -1.0),
            (1, 1.0),
            (-1, -1.0),
            (3, 1.0),
            (-3, -1.0),
            (4, 1.0),
            (-4, -1.0),
            (5, 1.0),
            (-5, -1.0),
            (6, -5.0),
            (-6, 5.0),
        ],
        _ => vec![(id, 1.0)],
    }
}

/// Translates PDG Monte Carlo IDs to particle IDs from the evolution basis.
#[allow(dead_code)]
pub fn pdg_mc_pids_to_evol(pid: i32) -> Vec<(i32, f64)> {
    match pid {
        -6 => vec![
            (100, 1.0 / 12.0),
            (135, -1.0 / 12.0),
            (200, -1.0 / 12.0),
            (235, 1.0 / 12.0),
        ],
        -5 => vec![
            (100, 1.0 / 12.0),
            (124, -1.0 / 10.0),
            (135, 1.0 / 60.0),
            (200, -1.0 / 12.0),
            (224, 1.0 / 10.0),
            (235, -1.0 / 60.0),
        ],
        -4 => vec![
            (100, 1.0 / 12.0),
            (115, -1.0 / 8.0),
            (124, 1.0 / 40.0),
            (135, 1.0 / 60.0),
            (200, -1.0 / 12.0),
            (215, 1.0 / 8.0),
            (224, -1.0 / 40.0),
            (235, -1.0 / 60.0),
        ],
        -3 => vec![
            (100, 1.0 / 12.0),
            (108, -1.0 / 6.0),
            (115, 1.0 / 24.0),
            (124, 1.0 / 40.0),
            (135, 1.0 / 60.0),
            (200, -1.0 / 12.0),
            (208, 1.0 / 6.0),
            (215, -1.0 / 24.0),
            (224, -1.0 / 40.0),
            (235, -1.0 / 60.0),
        ],
        -2 => vec![
            (100, 1.0 / 12.0),
            (103, 1.0 / 4.0),
            (108, 1.0 / 12.0),
            (115, 1.0 / 24.0),
            (124, 1.0 / 40.0),
            (135, 1.0 / 60.0),
            (200, -1.0 / 12.0),
            (203, -1.0 / 4.0),
            (208, -1.0 / 12.0),
            (215, -1.0 / 24.0),
            (224, -1.0 / 40.0),
            (235, -1.0 / 60.0),
        ],
        -1 => vec![
            (100, 1.0 / 12.0),
            (103, -1.0 / 4.0),
            (108, 1.0 / 12.0),
            (115, 1.0 / 24.0),
            (124, 1.0 / 40.0),
            (135, 1.0 / 60.0),
            (200, -1.0 / 12.0),
            (203, 1.0 / 4.0),
            (208, -1.0 / 12.0),
            (215, -1.0 / 24.0),
            (224, -1.0 / 40.0),
            (235, -1.0 / 60.0),
        ],
        1 => vec![
            (100, 1.0 / 12.0),
            (103, -1.0 / 4.0),
            (108, 1.0 / 12.0),
            (115, 1.0 / 24.0),
            (124, 1.0 / 40.0),
            (135, 1.0 / 60.0),
            (200, 1.0 / 12.0),
            (203, -1.0 / 4.0),
            (208, 1.0 / 12.0),
            (215, 1.0 / 24.0),
            (224, 1.0 / 40.0),
            (235, 1.0 / 60.0),
        ],
        2 => vec![
            (100, 1.0 / 12.0),
            (103, 1.0 / 4.0),
            (108, 1.0 / 12.0),
            (115, 1.0 / 24.0),
            (124, 1.0 / 40.0),
            (135, 1.0 / 60.0),
            (200, 1.0 / 12.0),
            (203, 1.0 / 4.0),
            (208, 1.0 / 12.0),
            (215, 1.0 / 24.0),
            (224, 1.0 / 40.0),
            (235, 1.0 / 60.0),
        ],
        3 => vec![
            (100, 1.0 / 12.0),
            (108, -1.0 / 6.0),
            (115, 1.0 / 24.0),
            (124, 1.0 / 40.0),
            (135, 1.0 / 60.0),
            (200, 1.0 / 12.0),
            (208, -1.0 / 6.0),
            (215, 1.0 / 24.0),
            (224, 1.0 / 40.0),
            (235, 1.0 / 60.0),
        ],
        4 => vec![
            (100, 1.0 / 12.0),
            (115, -1.0 / 8.0),
            (124, 1.0 / 40.0),
            (135, 1.0 / 60.0),
            (200, 1.0 / 12.0),
            (215, -1.0 / 8.0),
            (224, 1.0 / 40.0),
            (235, 1.0 / 60.0),
        ],
        5 => vec![
            (100, 1.0 / 12.0),
            (124, -1.0 / 10.0),
            (135, 1.0 / 60.0),
            (200, 1.0 / 12.0),
            (224, -1.0 / 10.0),
            (235, 1.0 / 60.0),
        ],
        6 => vec![
            (100, 1.0 / 12.0),
            (135, -1.0 / 12.0),
            (200, 1.0 / 12.0),
            (235, -1.0 / 12.0),
        ],
        _ => vec![(pid, 1.0)],
    }
}

/// Return the charge-conjugated PDG ID of `pid`.
#[allow(dead_code)]
pub const fn charge_conjugate_pdg_pid(pid: i32) -> i32 {
    match pid {
        21 | 22 => pid,
        _ => -pid,
    }
}

/// Checks if a given PID is an evolution PID.
pub fn is_evolution_pid(id: i32) -> bool {
    EVOL_BASIS_IDS.contains(&id)
}
