name: Release

on:
  push:
    tags:
      - 'v[0-9]+*'
  workflow_dispatch:

env:
  GH_TOKEN: ${{ github.token }}

jobs:
  create-release:
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    steps:
      - uses: actions/checkout@v4
      - name: Create new release
        run: |
          gh release create -d v${GITHUB_REF_NAME#v}

  cli-macos:
    strategy:
      matrix:
        include:
          - os: macos-13
            target: x86_64-apple-darwin
          - os: macos-14
            target: aarch64-apple-darwin
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Compile binary
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-host=${{ matrix.target }}
          cargo install --locked --path neopdf_cli --root=prefix --target=${{ matrix.target }}
          cd prefix
          tar czf ../neopdf_cli-${{ matrix.target }}.tar.gz .
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: neopdf_cli-${{ matrix.target }}
          path: neopdf_cli-${{ matrix.target }}.tar.gz

  cli-wheels-macos:
    strategy:
      matrix:
        include:
          - os: macos-13
            target: x86_64
          - os: macos-14
            target: aarch64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter --manifest-path neopdf_cli/Cargo.toml
          sccache: "true"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.job }}-${{ matrix.target }}
          path: dist

  cli-linux:
    runs-on: ubuntu-latest
    container: ghcr.io/radonirinaunimi/neopdf-container:latest
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu]
    steps:
      - uses: actions/checkout@v4
      - name: Compile binary
        run: |
          cargo install --locked --path neopdf_cli --root=prefix --target=${{ matrix.target }} -vv
          cd prefix
          tar czf ../neopdf_cli-${{ matrix.target }}.tar.gz .
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: neopdf_cli-${{ matrix.target }}
          path: neopdf_cli-${{ matrix.target }}.tar.gz

  cli-wheels-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64]
    steps:
      - uses: actions/checkout@v4
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter --manifest-path neopdf_cli/Cargo.toml
          sccache: "true"
          manylinux: auto
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.job }}-${{ matrix.target }}
          path: dist

  capi-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        target: [x86_64-apple-darwin, aarch64-apple-darwin]
    steps:
      - uses: actions/checkout@v4
      - name: Compile library
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --target=${{ matrix.target }}
          cargo install --locked cargo-c
          cd neopdf_capi
          export CARGO_C_INSTALL_PREFIX=$(pwd)/prefix
          cargo cinstall --destdir=prefix --libdir=lib --library-type=cdylib --locked --release --prefix=/ --target=${{ matrix.target }} --verbose
          cd prefix
          tar czf ../../neopdf_capi-${{ matrix.target }}.tar.gz .
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: neopdf_capi-${{ matrix.target }}
          path: neopdf_capi-${{ matrix.target }}.tar.gz

  capi-linux:
    runs-on: ubuntu-latest
    container: ghcr.io/radonirinaunimi/neopdf-container:latest
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu]
    steps:
      - uses: actions/checkout@v4
      - name: Compile library
        run: |
          cd neopdf_capi
          export CARGO_C_INSTALL_PREFIX=$(pwd)/prefix
          cargo cinstall --destdir=prefix --libdir=lib --library-type=cdylib --locked --release --prefix=/ --target=${{ matrix.target }} --verbose
          cd prefix
          tar czf ../../neopdf_capi-${{ matrix.target }}.tar.gz .
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: neopdf_capi-${{ matrix.target }}
          path: neopdf_capi-${{ matrix.target }}.tar.gz

  publish-release:
    needs: [capi-macos, cli-macos, capi-linux, cli-linux]
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Create new release
        run: |
          version=${GITHUB_REF_NAME#v}
          gh release edit v${version} -n ""
          find artifacts -name 'neopdf_*' ! -name '*.whl' -type f -exec gh release upload v${version} {} +
          gh release edit v${version} --draft=false

  publish-crates:
    runs-on: ubuntu-latest
    container: ghcr.io/radonirinaunimi/neopdf-container:latest
    if: "startsWith(github.ref, 'refs/tags/')"
    steps:
      - uses: actions/checkout@v4
      - name: Publish all crates
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          rustup default stable
          cargo publish -p neopdf
          cargo publish -p neopdf_capi
          cargo publish -p neopdf_cli
          cargo publish -p neopdf_pyapi

  wheels-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64]
    steps:
      - uses: actions/checkout@v4
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter --manifest-path neopdf_pyapi/Cargo.toml
          sccache: 'true'
          manylinux: auto
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.job }}-${{ matrix.target }}
          path: dist

  wheels-macos:
    runs-on: macos-13
    strategy:
      matrix:
        target: [aarch64, x86_64]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter --manifest-path neopdf_pyapi/Cargo.toml
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.job }}-${{ matrix.target }}
          path: dist

  wheels-sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist --manifest-path neopdf_pyapi/Cargo.toml
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.job }}
          path: dist

  wheels-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target: [x64]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          architecture: ${{ matrix.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter --manifest-path neopdf_pyapi/Cargo.toml
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.job }}-${{ matrix.target }}
          path: dist

  release-cli-wheels:
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs:
      - cli-wheels-linux
      - cli-wheels-macos
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: "cli-wheels-*"
          merge-multiple: true
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        with:
          command: upload
          args: --skip-existing *

  release-wheels:
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs:
      - wheels-linux
      - wheels-macos
      - wheels-sdist
      - wheels-windows
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: "wheels-*"
          merge-multiple: true
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        with:
          command: upload
          args: --skip-existing *
